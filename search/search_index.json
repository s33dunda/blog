{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Dunda's Blog!","text":"<p>Dictionary Entry</p> Dunda /\u02c8d\u028cnd\u0259/ <p>noun</p> <ol> <li> <p>A surname, pronounced \"Done-Duh\"</p> </li> <li> <p>One who gives deeply philosophical and nuanced takes around how SRE, DevOps, and Platform</p> <p>Engineering are totally not the same thing.</p> </li> <li> <p>One who is triggering</p> </li> <li> <p>Delusionally grandiose; quixotic</p> </li> </ol> <p>adjective</p> <ol> <li>Sarcastic, often in a way that is both amusing and slightly unsettling.</li> </ol> Usage <p>\"I tried to explain the difference between DevOps and Platform Engineering, but then a total Dunda showed up and made it way more complicated than it needed to be.\"</p> <p>Here you'll find stuff an idiot human writes about before the robots took over.</p> <p>Stuff like:</p> <ul> <li>Site Reliability Engineering (SRE)</li> <li>DevOps practices and tools</li> <li>Platform Engineering solutions</li> <li>Cloud infrastructure and automation</li> <li>Am I repeating myself here ^?</li> </ul> <p>Not gonna lie. All of which are written with the help of Al. A ChatBot. An LLM. The new Overlords! But I'll call out and highlight the places in which AI did the heavy lifting. Let's have some fun!</p>"},{"location":"#latest-posts","title":"Latest Posts","text":"<p>The latest blog posts will automatically appear below.</p>"},{"location":"features/glossary/","title":"Seeds & Services: A Plant-Based Glossary for Tech Ecosystems","text":"","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#seeds-services-a-plant-based-glossary","title":"Seeds &amp; Services: A Plant-Based Glossary","text":"<p>It's difficult to explain technical concepts to non-technical people. And especially difficult to explain Platform Engineering concepts to non-technical people let alone to other technical people. So I've been using garden-based metaphors to help explain things. People can relate to farming/gardening and, just like before, the machines will soon kick many of us off the ranch.</p> <p>From Seeds to Services</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#the-garden-foundation-infrastructure","title":"The Garden Foundation (Infrastructure)","text":"Metaphor Technical Meaning Plant Meaning Concrete Example Garden/Farm Organization/business ecosystem Cultivated ecosystem with multiple plant species A software company with multiple product lines and services Soil Platform/runtime environment Growing medium providing physical support and nutrients Kubernetes cluster where applications run Plots/Beds VPCs/Network segments Designated growing areas with specific conditions AWS Virtual Private Cloud separating production from development environments","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#plant-life-applications","title":"Plant Life (Applications)","text":"Metaphor Technical Meaning Plant Meaning Concrete Example Seeds Container images Embryonic plant structures containing genetic instructions Docker images stored in a container registry like Docker Hub or ECR Plants Running containers/applications Living organisms that grow, process resources, and respond to environment A deployed microservice handling authentication Fruits Tangible outputs/business value Developed structures containing seeds and resources Generated reports, processed transactions, or customer insights","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#resources-compute","title":"Resources (Compute)","text":"Metaphor Technical Meaning Plant Meaning Concrete Example Sunlight Electricity/power Primary energy source for photosynthesis and growth Data center power allocation for your cloud infrastructure Enzymes CPU/Processing power Biological catalysts that enable metabolic reactions CPU allocation for a compute-intensive ML model training job Sap Memory resources Fluid carrying nutrients and signals throughout the plant RAM allocated to a database instance for caching frequently accessed data","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#flow-systems-data-communication","title":"Flow Systems (Data &amp; Communication)","text":"Metaphor Technical Meaning Plant Meaning Concrete Example Water Data flow throughout the system Essential transport medium for nutrients API requests flowing between microservices Carbon Dioxide Input data for processing Raw material absorbed from environment for processing Raw customer data entering a data pipeline Oxygen Data outputs/responses Processed output released back into environment Processed analytics results delivered to a dashboard","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#plant-communication-connectivity","title":"Plant Communication &amp; Connectivity","text":"","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#chemical-signaling-vocs","title":"Chemical Signaling (VOCs)","text":"<p>Plants communicate through volatile organic compounds (VOCs) - chemicals released into the air that other plants can detect and respond to. TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#mycorrhizal-networks","title":"Mycorrhizal Networks","text":"<p>Underground fungal networks that connect plant roots and facilitate resource sharing - nature's original internet.</p> <p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#electricalcalcium-wave-signaling","title":"Electrical/Calcium Wave Signaling","text":"<p>Plants use electrical signals and calcium waves to communicate across their structures.</p> <p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#soundvibration-communication","title":"Sound/Vibration Communication","text":"<p>Plants can produce and respond to sounds and vibrations in their environment.</p> <p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#root-networks","title":"Root Networks","text":"<p>The underground infrastructure that supports and connects plants.</p> <p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#plant-lifecycle-growth","title":"Plant Lifecycle &amp; Growth","text":"<p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":"<p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#platform-engineering-elements","title":"Platform Engineering Elements","text":"<p>TBD</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"features/glossary/#human-elements","title":"Human Elements","text":"<p>TBD</p> <p>Using This Glossary</p> <p>This glossary is designed to help you think about technical systems in a more intuitive, organic way. Feel free to use these metaphors in your own discussions and documentation to make complex concepts more approachable.</p> <p>The Science Behind the Metaphors</p> <p>These metaphors aren't just poetic - they're based on real plant biology. Plants communicate through chemical signals, fungal networks, electrical impulses, and even sound waves, creating complex adaptive systems similar to our technical infrastructures.</p>","tags":["devops","platform-engineering","sre","glossary","plant-based"]},{"location":"includes/case-insensitive-abbreviations/","title":"Case insensitive abbreviations","text":""},{"location":"doc-failures-argocd-and-eks/","title":"Doc Failures: ArgoCD and EKS","text":"<p>Small Patch; Big Implications</p> <p>I encountered an error that really testing my understanding of K8s, containers, and ArgoCD:</p> <pre><code># getting credentials: exec: executable argocd-k8s-auth failed with exit code 20 (Client.Timeout exceeded while awaiting headers)\n</code></pre> <p>This error hinted at credential issues and a timeout while awaiting headers. Initial checks on network configurations, IAM roles, and Kubernetes cluster accessibility didn't resolve the problem. It became clear that the issue was deeper, involving the security context of our Kubernetes deployment.</p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"doc-failures-argocd-and-eks/#understanding-kubernetes-security-contexts","title":"Understanding Kubernetes Security Contexts","text":"<p>Kubernetes security contexts define privilege and access control settings for pods. They determine how a container runs and interacts with the underlying node and other resources. In our case, the default security context was preventing ArgoCD from accessing necessary IAM role tokens stored in <code>/var/run/secrets/eks.amazonaws.com/serviceaccount/</code> or <code>/var/run/secrets/pods.eks.amazonaws.com/serviceaccount/</code> if using AWS New EKS Pod Identities</p> <p>ArgoCD User ID Set as 999</p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"doc-failures-argocd-and-eks/#crafting-the-patch","title":"Crafting the Patch","text":"<p>The solution required adjusting the security context to enable ArgoCD to read these tokens. Specifically, the ArgoCD user group ID needed to be aligned with the group ID of the service account token files, which is 999. Here's the patch:</p> <p>patch.yaml: <pre><code>- op: add\n  path: /spec/template/spec/securityContext\n  value: {}\n- op: add\n  path: /spec/template/spec/securityContext/fsGroup\n  value: 999\n</code></pre></p> <p>The <code>securityContext</code> field was added to define the security settings for the pod. The <code>fsGroup</code> field was set to 999, ensuring that all processes running in the pod could access the token file, as both the ArgoCD user group and the service account token files are in this group.</p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"doc-failures-argocd-and-eks/#integrating-the-patch","title":"Integrating the Patch","text":"<p>The patch was integrated into our <code>kustomization.yaml</code> to apply it to both the ArgoCD deployment and the stateful set:</p> <p>kustomization.yaml: <pre><code># Enable argocd to read iam-role token from /var/run/secrets/eks.amazonaws.com/serviceaccount/token, etc\n- path: patch.yaml\n  target:\n    kind: Deployment\n    name: argocd-server\n    namespace: argocd\n- path: patch.yaml\n  target:\n    kind: StatefulSet\n    name: argocd-application-controller\n    namespace: argocd\n</code></pre></p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"doc-failures-argocd-and-eks/#applying-the-solution","title":"Applying the Solution","text":"<p>Applying these patches involved updating the security context to allow ArgoCD to read the IAM role tokens. The <code>fsGroup</code> ensures that the token file is accessible to the ArgoCD processes, addressing the core issue. After applying the patches, the error was resolved, and ArgoCD was back online.</p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"doc-failures-argocd-and-eks/#technical-insights","title":"Technical Insights","text":"<p>This solution hinges on understanding Kubernetes security contexts and how they control pod interactions with the node and external resources. The <code>securityContext</code> configuration is crucial for managing permissions and ensuring that containers can access necessary files and resources securely. By setting the <code>fsGroup</code> to 999, we aligned the ArgoCD user group with the group ID of the service account token files, ensuring seamless access and resolving the credential timeout error.</p> <p>This experience highlights the importance of deep technical knowledge in Kubernetes and secure environments. It's not just about deploying applications but understanding the underlying security mechanisms that ensure smooth and secure operations. Every challenge is a learning opportunity, and mastering these details makes a significant difference in maintaining robust and reliable systems.</p>","tags":["ArgoCD","Kubernetes","EKS"]},{"location":"devops-with-the-app-code-the-final-boss/","title":"DevOps with the App Code: The Final Boss","text":"<p>What is DevOps?</p> <p>I've been practicing \"DevOps\" for 12 years and I have my opinions but like the controversial GIF pronunciation...</p> Hot Take <p>It's pronounced GIF! Fight me! </p> <p>I feel its important to include the originators of the term DevOps -- most notably Patrick Debois -- to see what is said about it.</p> <p>I found this interview with Mr. Debois to be succinct. And in true tl;dr; fashion -- (what isn't tl;dr; these days since the creation of Musical.ly?  (What's Musical.ly? it's pronounced TikTok)) -- I've asked Claude to \"Pull out the keys, mode of concepts, and threads of the interview.\"</p> <p>And what did Claude gleam?</p> AI Analysis","tags":["devops","gitops","best-practices"]},{"location":"devops-with-the-app-code-the-final-boss/#keys","title":"Keys","text":"<ul> <li>Collaboration between development and operations</li> <li>System-wide optimization versus siloed efficiency</li> <li>Cultural transformation in organizational structure</li> <li>Business competitiveness and survival</li> </ul>","tags":["devops","gitops","best-practices"]},{"location":"devops-with-the-app-code-the-final-boss/#mode","title":"Mode","text":"<ul> <li>Interview format with explanatory responses</li> <li>Experience-based perspective sharing</li> <li>Philosophical approach to practical problems</li> <li>Focus on belief systems and mindset changes</li> </ul>","tags":["devops","gitops","best-practices"]},{"location":"devops-with-the-app-code-the-final-boss/#threads","title":"Threads","text":"<pre><code>Collaboration/collaborative\nSystem/whole system\nEfficiency/efficient\nBottleneck\nSilos\nBelieve/belief\nCulture/cultural\nEmpathy/respect\nOptimization\nThinking\nTools (with limitations)\nBusiness value\n</code></pre>","tags":["devops","gitops","best-practices"]},{"location":"devops-with-the-app-code-the-final-boss/#overall-takeaway","title":"Overall Takeaway","text":"<p>TL;DR</p> <p>The passage presents DevOps primarily as a cultural mindset shift that enables system-wide optimization through collaboration, rather than just a set of technical practices or tools.</p>","tags":["devops","gitops","best-practices"]},{"location":"devops-with-the-app-code-the-final-boss/#what-moving-closer-to-the-app-code-really-means","title":"What \"Moving Closer to the App Code\" Really Means","text":"<p>If we take our the four keys mentioned by Debois:</p> <ul> <li>Collaboration between development and operations</li> <li>System-wide optimization versus siloed efficiency</li> <li>Cultural transformation in organizational structure</li> <li>Business competitiveness and survival</li> </ul> <p>It stands to reason that moving closer to the app code is more than just Policy as Code, Infrastructure as Code, Configuration as Code, or even GitOps. Because even with all of those tools, we still run the risk of pulling a Fry:</p> <p></p> <p>So we need to stop siloing our app code. That's right. Stop siloing your app code. You need a k8s deploy? Put it with your app code. You need metrics, traces, and monitors enabled? Put it with your app code. You need a database, message bus, or cache? Put it with your app code!</p> <p>You need a VPC? What are you crazy? Don't put that with your app code.</p> <p>I'll continue writing tutorials and blogs to help folks learn how to move closer to the app code.</p> <p>Stay tuned and look out for more content including examples and actual code!</p>","tags":["devops","gitops","best-practices"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/","title":"Platform Engineers NYC: Introducing Canyon: The AI for developer self-service","text":"<p>I attended a meetup with Sylvain Kalache and Kaspar Von Gr\u00fcnberg. It was a wide-ranging and forward-thinking discussion primarily around AI. The conversation oscillated between speakers ranging from skepticism and adoption to tips on avoiding hallucinations, eventually touching on Humanitec's Canyon<sub>[1]</sub> progress bringing AI in platform engineering and Rootly AI Labs'<sub>[2]</sub> Root Cause Analysis, and more.</p> <p>It was all fascinating but I was hung up on the Machine Conversation Protocol (MCP) and its new complementary Agent2Agent Protocol (A2A). I was supposed to continue with my seminal work today... Nerd Snipe confirmed. Plus, who doesn't love a new standard?</p>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/#mcp-machine-conversation-protocol","title":"MCP (Machine Conversation Protocol)","text":"<p>\"I think the latest, no longer latest, but almost latest is MCP which is a protocol that was pioneered by Entropic. And MCP is streamlining communication between an AI agent this AI agent can be on anything. So again, MCP is communicating with data sources And A2A is handling the communication between agents. So they are complementary.\"</p> <p>\u2014 Sylvain Kalache</p>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/#google-fu-mcp","title":"Google Fu: MCP","text":"<p>I know little about MCP but it's nothing a little Google Fu can't solve. </p> <p>Github is a good place to start. And awesome aggregators are rarely bad.  Gappcypher/awesome-mcp-servers led me right to the Model Context Protocol (MCP) website.  For Server Developers - Model Context Protocol. Where they have a tutorial for building your own MCP server.</p> <p>I think I'll walk through this tutorial in my next post. Either that or this github/github-mcp-server: GitHub's official MCP Server. I'm thinking a PR review assistant would be a good use case.</p> <p>Let me know if that's something any of y'all are be interested in.</p>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/#google-fu-a2a","title":"Google Fu: A2A","text":"<ul> <li> <p>Comparison between MCP and traditional REST APIs:</p> <p>\"REST APIs are then design with AI agent in mind. They are one-to-one [...] it's an isolated call, [...] there is no context sharing. It's designed by human for humans\"</p> <p>\u2014 Sylvain Kalache</p> </li> <li> <p>Adoption of MCP by major players:</p> <p>\"MCP was pioneered by Anthropic but is started to be widely adopted Including by the competition OpenAI.\"</p> <p>\u2014 Sylvain Kalache</p> </li> </ul>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/#is-a2a-a-protocol-or-just-a-schema","title":"Is A2A a protocol or just a schema?","text":"<p>I thought that A2A was a sort of Schema for AI agents. But it's not. A2A (Agent2Agent) is a specific protocol with its own distinct purpose and categorization, Google Fu resulted in many musings within the last couple of days:</p> <p>A2A is an open protocol developed by Google that \"will allow AI agents to communicate with each other, securely exchange information, and coordinate actions on top of various enterprise platforms or applications.\" It was recently announced, about a week ago. Announcing the Agent2Agent Protocol (A2A) - Google Developers Blog.<sub>[6]</sub></p> <p>The Agent2Agent (A2A) protocol \"facilitates communication between independent AI agents\" and addresses \"one of the biggest challenges in enterprise AI adoption is getting agents built on different frameworks and vendors to work together.\" GitHub - google/A2A: An open protocol enabling communication and interoperability between opaque agentic applications.<sub>[7]</sub></p> <p>Interestingly, A2A is positioned as complementary to, rather than competing with, Anthropic's Model Context Protocol (MCP). While \"MCP focuses on organizing what agents, tools, or users send into the model\" \"A2A focuses on coordination between intelligent agents.\" Post | LinkedIn<sub>[8]</sub></p> <p>The key distinction is that \"Anthropic's Model Context Protocol (MCP) focuses on standardizing how AI agents connect to and interact with external data sources and tools. A2A's emphasis lies in the interoperability layer, ensuring agents can securely discover one another and collaborate once models are ready to exchange data or coordinate tasks.\" Google Introduces Agent2Agent (A2A): A New Open Protocol - MarkTechPost<sub>[9]</sub></p> <p>A2A facilitates communication between a \"client\" agent and a \"remote\" agent, where the client agent \"is responsible for formulating and communicating tasks, while the remote agent is responsible for acting on those tasks\" to provide information or take actions. Announcing the Agent2Agent Protocol (A2A) - Google Developers Blog<sub>[10]</sub></p> <p>The technical implementation uses established web standards including \"HTTP, SSE (Server-Sent Events), and JSON-RPC, which should simplify integration with current IT infrastructure.\" Understanding Agent2Agent (A2A): A Protocol for LLM Communication<sub>[11]</sub></p> <p>A2A \"acts as an abstraction layer, hiding the underlying implementation details of individual agents\" and is designed with openness and interoperability as key principles, allowing \"agents built with any framework (LangChain, CrewAI, Google ADK, Autogen, custom builds, etc.) or vendor platform to communicate.\" What is The Agent2Agent Protocol (A2A) and Why You Must Learn It Now<sub>[12]</sub></p> <p>The core discovery mechanism uses \"Agent Cards\" - standardized metadata files that declare an agent's capabilities, allowing other agents to discover what services they can provide. How the Agent2Agent Protocol (A2A) Actually Works: A Technical Breakdown | Blott Studio<sub>[13]</sub></p> <p>In terms of how A2A relates to MCP: \"If MCP is what enables agents to use tools, then A2A is their conversation while they work. MCP equips individual agents with capabilities, while A2A helps them coordinate those capabilities as a team.\" What Is the A2A (Agent2Agent) Protocol and How It Works<sub>[14]</sub></p> <p>Google shows a typical flow for A2A being:</p> <pre><code>Discovery: Client fetches the Agent Card from the server's well-known URL.\nInitiation: Client sends a tasks/send or tasks/sendSubscribe request containing the initial user message and a unique Task ID.\nProcessing:\n    (Streaming): Server sends SSE events (status updates, artifacts) as the task progresses.\n    (Non-Streaming): Server processes the task synchronously and returns the final Task object in the response.\nInteraction (Optional): If the task enters input-required, the client sends subsequent messages using the same Task ID via tasks/send or tasks/sendSubscribe.\nCompletion: The task eventually reaches a terminal state (completed, failed, canceled).\n</code></pre> <p>And with all of the big players involved, Atlassian, Box, Cohere, Intuit, Langchain, MongoDB, PayPal, Salesforce, SAP, ServiceNow, UKG and Workday; and leading service providers including Accenture, BCG, Capgemini, Cognizant, Deloitte, HCLTech, Infosys, KPMG, McKinsey, PwC, TCS, and Wipro. I think it's safe to say that A2A should be taken seriously and used in your projects or at the very least added as a ticket to your backlogs.</p>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"platform-engineers-nyc-introducing-canyon-the-ai-for-developer-self-service/#references","title":"References","text":"<p>[1] Humanitec's Canyon</p> <p>[2] Rootly AI Labs</p> <p>[3] GitHub - appcypher/awesome-mcp-servers: Awesome MCP Servers</p> <p>[4] For Server Developers - Model Context Protocol</p> <p>[5] Building MCP with LLMs - Model Context Protocol</p> <p>[6] Announcing the Agent2Agent Protocol (A2A) - Google Developers Blog</p> <p>[7] GitHub - google/A2A: An open protocol</p> <p>[8] Post | LinkedIn</p> <p>[9] Google Introduces Agent2Agent (A2A) - MarkTechPost</p> <p>[10] Announcing the Agent2Agent Protocol (A2A) - Google Developers Blog</p> <p>[11] Understanding Agent2Agent (A2A): A Protocol for LLM Communication</p> <p>[12] What is The Agent2Agent Protocol (A2A) and Why You Must Learn It Now</p> <p>[13] How the Agent2Agent Protocol (A2A) Actually Works: A Technical Breakdown | Blott Studio</p> <p>[14] What Is the A2A (Agent2Agent) Protocol and How It Works</p>","tags":["AI","platform-engineering","artificial-intelligence","meetups"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/","title":"Cultivating Your Local Garden: Create Seedlings with Dev Containers and Devbox","text":"<p>Background</p> <p>I've been planting development environments for over a decade, and like choosing between heirloom or hybrid seeds.</p> Goals <p>It's all about consistency, reproducibility, and avoiding dependency hell. We want to create a consistent, reproducible local development environment that works the same for everyone on the team, regardless of their local machine's quirks.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#preparing-the-soil-why-dev-containers-and-devbox-matter","title":"Preparing the Soil: Why Dev Containers and Devbox Matter","text":"<p>Today we're going to plant a seedling in our local garden. We'll start with the soil preparation - creating consistent, reproducible local development environments with Dev Containers and Devbox. Then we'll plant a simple Go application, before we move on to cultivating a full Kubernetes ecosystem with ArgoCD.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#seedling-selection-understanding-dev-containers-and-devbox","title":"Seedling Selection: Understanding Dev Containers and Devbox","text":"<p>Think of Dev Containers as biodegradable seed starter pots. They provide an isolated, consistent environment where your application seedlings can germinate without being affected by the peculiarities of your local soil (operating system). The Dev Containers spec aims to standardize how these seed pots are constructed, so no matter what gardening tools (IDE) you're using, your seeds will sprout the same way.</p> <p>Devbox, on the other hand, is like a premium seed starting mix - it provides all the nutrients (tools and dependencies) your seedlings need in exactly the right proportions. Built on Nix packages, it ensures everyone on your team is using identical tools with identical versions.</p> <p>Together, they provide precisely what we need: predictable, reproducible environments that work the same for everyone on the team, regardless of their local machine's quirks.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#tool-selection-setting-up-our-garden","title":"Tool Selection: Setting Up Our Garden","text":"<p>Before we start planting, let's gather our tools. You'll need:</p> <ol> <li>Docker (for running containers)</li> <li>Git (for retrieving our sample code)</li> <li>A terminal (your garden trowel)</li> <li>VS Code (optional but recommended)</li> </ol> <p>Let's get our hands dirty!</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#preparing-the-soil-initial-setup","title":"Preparing the Soil: Initial Setup","text":"<p>First, let's create a directory for our project:</p> <pre><code>mkdir garden-sample\ncd garden-sample\n</code></pre> <p>Alternatively, if you prefer to use a sample repository, you can clone it (note: you'll need to create this repository or use an existing one):</p> <pre><code>git clone https://github.com/s33d-innovations/garden-sample\ncd garden-sample\n</code></pre> <p>Now, let's install Devbox, which will help us manage all our tools:</p> <pre><code># For macOS/Linux users\ncurl -fsSL https://get.jetify.com/devbox | bash\n\n# For Windows users with PowerShell\nirm https://get.jetify.com/devbox/install.ps1 | iex\n</code></pre> <p>You can verify that Devbox is installed correctly by checking its version:</p> <pre><code>devbox version\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#planting-the-first-seeds-creating-our-development-environment","title":"Planting the First Seeds: Creating Our Development Environment","text":"<p>Now that we have our tools, let's create a <code>devbox.json</code> file that defines all the tools we'll need for our project:</p> <pre><code>devbox init\n</code></pre> <p>This creates a basic <code>devbox.json</code> file. We can now add packages one by one using the <code>devbox add</code> command:</p> <pre><code># Add Go\ndevbox add go\n\n# Add kubectl\ndevbox add kubectl\n\n# Add kind\ndevbox add kind\n\n# Add ArgoCD\ndevbox add argocd\n\n# Add Kubernetes Helm\ndevbox add kubernetes-helm\n\n# Add jq\ndevbox add jq\n</code></pre> <p>Each of these commands will download and install the latest version of the package. If you need a specific version, you can specify it like <code>devbox add go@1.22.3</code>.</p> <p>Let's check our <code>devbox.json</code> file to see what was created:</p> <pre><code>cat devbox.json\n</code></pre> <p>You should see something like:</p> <pre><code>{\n  \"packages\": [\n    \"go@latest\",\n    \"kubectl@latest\",\n    \"kind@latest\",\n    \"argocd@latest\",\n    \"kubernetes-helm@latest\",\n    \"jq@latest\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"echo 'Welcome to devbox!' &gt; /dev/null\"\n    ],\n    \"scripts\": {\n      \"test\": [\n        \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Let's update the init_hook to display a more gardening-themed message:</p> <pre><code># You can edit the file directly, or use a text editor of your choice\nsed -i '' 's/echo '\"'\"'Welcome to devbox!'\"'\"' &gt; \\/dev\\/null/echo '\"'\"'Your garden tools are ready!'\"'\"'/g' devbox.json\n</code></pre> <p>Let's activate our tools:</p> <pre><code>devbox shell\n</code></pre> <p>You should now have access to all these tools, isolated from your system's global installations. Think of it as having a perfect set of garden tools in a clean shed, separate from all the other tools in your garage.</p> <p>Alternatively, you can run commands directly using <code>devbox run</code>:</p> <pre><code># Check Go version\ndevbox run -- go version\n\n# Check kubectl version\ndevbox run -- kubectl version --client\n\n# Check kind version\ndevbox run -- kind --version\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#from-seedlings-to-starter-pots-creating-a-dev-container","title":"From Seedlings to Starter Pots: Creating a Dev Container","text":"<p>Now, let's use Devbox to generate a Dev Container configuration:</p> <pre><code>devbox generate devcontainer --force\n</code></pre> <p>This creates a <code>.devcontainer</code> directory with two important files:</p> <ol> <li><code>devcontainer.json</code> - The \"recipe\" for our container environment</li> <li><code>Dockerfile</code> - Instructions for building the container image</li> </ol> <p>Let's examine these files:</p> <pre><code># List the contents of the .devcontainer directory\nls -la .devcontainer\n\n# View the devcontainer.json file\ncat .devcontainer/devcontainer.json\n</code></pre> <p>You'll see something like:</p> <pre><code>{\n  \"name\": \"Devbox Remote Container\",\n  \"build\": {\n    \"dockerfile\": \"./Dockerfile\",\n    \"context\": \"..\"\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\n        \"jetpack-io.devbox\"\n      ]\n    }\n  },\n  \"remoteUser\": \"devbox\"\n}\n</code></pre> <p>And the Dockerfile:</p> <pre><code>cat .devcontainer/Dockerfile\n</code></pre> <p>Looks like:</p> <pre><code>FROM jetpackio/devbox:latest\n\n# Installing your devbox project\nWORKDIR /code\nUSER root:root\nRUN mkdir -p /code &amp;&amp; chown ${DEVBOX_USER}:${DEVBOX_USER} /code\nUSER ${DEVBOX_USER}:${DEVBOX_USER}\nCOPY --chown=${DEVBOX_USER}:${DEVBOX_USER} devbox.json devbox.json\nCOPY --chown=${DEVBOX_USER}:${DEVBOX_USER} devbox.lock devbox.lock\n\n\n\nRUN devbox run -- echo \"Installed Packages.\" &amp;&amp; nix-store --gc &amp;&amp; nix-store --optimize\n\nRUN devbox shellenv --init-hook &gt;&gt; ~/.profile\n</code></pre> <p>Note that the Docker image name has changed from <code>jetpackio/devbox:latest</code> to <code>jetify-com/devbox:latest</code> in newer versions of Devbox.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#germination-running-our-dev-container","title":"Germination: Running Our Dev Container","text":"<p>There are two main ways to start working within our Dev Container:</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#option-1-using-vs-code-recommended-for-beginners","title":"Option 1: Using VS Code (Recommended for beginners)","text":"<p>If you have VS Code installed with the Dev Containers extension:</p> <ol> <li>Open VS Code</li> <li>Open the command palette (Ctrl+Shift+P or Cmd+Shift+P)</li> <li>Select \"Dev Containers: Open Folder in Container\"</li> <li>Navigate to your project folder</li> </ol> <p>VS Code will build and start the container, then open an integrated environment with all your tools ready to use.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#option-2-using-devpod","title":"Option 2: Using Devpod","text":"<p>For a more flexible approach that works with multiple IDEs, we can use Devpod:</p> <pre><code># Install Devpod\ncurl -fsSL https://devpod.sh/install.sh | bash\n\n# Add the Kubernetes provider (for later in our series)\ndevpod provider add kubernetes\n\n# Start our environment\ndevpod up .\n</code></pre> <p>This will build your container, set up the environment, and connect your preferred editor.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#testing-our-seedlings-verifying-our-setup","title":"Testing Our Seedlings: Verifying Our Setup","text":"<p>Let's make sure everything is working by running a few commands in our container's terminal:</p> <pre><code># Check Go version\ngo version\n\n# Check kubectl version\nkubectl version --client\n\n# Check kind version\nkind --version\n</code></pre> <p>You should see output confirming that all your tools are installed at the versions specified in your <code>devbox.json</code>.</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#transplanting-creating-a-simple-go-application","title":"Transplanting: Creating a Simple Go Application","text":"<p>Now that our environment is ready, let's create a simple Go application that we'll eventually deploy to Kubernetes. We'll create a directory structure like this:</p> <pre><code>garden-sample/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 go.mod\n\u2502   \u2514\u2500\u2500 main.go\n\u2514\u2500\u2500 go.work\n</code></pre> <p>Let's start by creating the app directory and the main Go file:</p> <pre><code># Create the app directory\nmkdir -p app\n\n# Create the Go application file\ncat &gt; app/main.go &lt;&lt; 'EOF'\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        hostname, _ := os.Hostname()\n        fmt.Fprintf(w, \"Hello from s33d! I'm a seedling running on %s\\n\", hostname)\n    })\n\n    port := os.Getenv(\"PORT\")\n    if port == \"\" {\n        port = \"8080\"\n    }\n\n    fmt.Printf(\"Server starting on port %s...\\n\", port)\n    http.ListenAndServe(\":\"+port, nil)\n}\nEOF\n</code></pre> <p>Now, let's initialize a Go module for our application:</p> <pre><code># Navigate to the app directory\ncd app\n\n# Create a go.mod file\necho 'module example.com/seedling\n\ngo 1.24\n' &gt; go.mod\n\n# Verify the go.mod file was created\ncat go.mod\n\n# Return to the project root\ncd ..\n</code></pre> <p>Next, we need to create a Go workspace file to help Go find our module. This is important when working with Go modules in subdirectories:</p> <pre><code># Create a go.work file in the project root\necho 'go 1.24\n\nuse ./app\n' &gt; go.work\n</code></pre> <p>Now we can build and run the application using Devbox:</p> <pre><code># Build the application from the project root\ndevbox run -- go build -o seedling ./app\n\n# Run the application\ndevbox run -- ./seedling\n</code></pre> <p>If you encounter Go version compatibility issues, you may need to update your go.mod and go.work files to match the Go version provided by Devbox:</p> <pre><code># Check your Go version\ndevbox run -- go version\n\n# Update your go.mod file accordingly\n# For example, if Devbox provides Go 1.24.1:\necho 'module example.com/seedling\n\ngo 1.24\n' &gt; app/go.mod\n\n# Also update your go.work file\necho 'go 1.24\n\nuse ./app\n' &gt; go.work\n</code></pre> <p>Once the application is running, open your browser to http://localhost:8080, and you should see your seedling's greeting!</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#why-this-approach-solving-real-problems","title":"Why This Approach? Solving Real Problems","text":"<p>You might be wondering: why go through all this trouble? Couldn't I just install Go and Kubernetes tools directly on my machine?</p> <p>Here's where our gardening metaphor illuminates the benefits:</p> <ol> <li> <p>Soil Consistency: Just like different plots of soil can have vastly different pH levels, nutrient content, and drainage properties, different developer machines can have conflicting dependencies, incompatible versions, and unique configurations. Dev Containers ensure everyone is working with identical soil conditions.</p> </li> <li> <p>Seed Preservation: When you package your development environment with your code, you're essentially preserving the exact conditions that your seeds (application) need to sprout. Five years from now, someone can still clone your repo and have exactly the same environment you used to develop it.</p> </li> <li> <p>Sustainable Gardening: By isolating your tools per project, you avoid the \"dependency hell\" that can occur when different projects need different versions of the same tools. It's like having separate garden beds for plants with different soil needs.</p> </li> <li> <p>Transplant Readiness: Our goal is to eventually transplant these seedlings to Kubernetes. By developing in containers from the start, we ensure our application is container-ready from day one.</p> </li> </ol>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#whats-next-from-seedling-to-garden","title":"What's Next: From Seedling to Garden","text":"<p>In the next post, we'll create a local Kubernetes cluster using Kind, and start preparing the ground for deploying our application with ArgoCD. We'll see how these seedlings we've planted today grow into a full development workflow that mirrors production environments.</p> <p>Remember</p> <p>Good gardeners know that proper soil preparation is the foundation of a successful garden. Similarly, well-crafted development environments are the foundation of successful software projects.</p> <p>Stay tuned as we continue to cultivate our garden, moving from these simple seedlings to a lush, integrated ecosystem of services and tools!</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#troubleshooting","title":"Troubleshooting","text":"","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#go-module-not-found-issues","title":"Go Module Not Found Issues","text":"<p>If you encounter errors like <code>go: cannot find main module, but found .git/config in /path/to/your/repo</code>, it means Go can't find your module. This typically happens when you're trying to build from a directory that doesn't contain a go.mod file or isn't part of a Go workspace:</p> <pre><code># Create a go.work file in your current directory\necho 'go 1.24\n\nuse ./app\n' &gt; go.work\n\n# Now try building again\ndevbox run -- go build -o seedling ./app\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#go-version-compatibility-issues","title":"Go Version Compatibility Issues","text":"<p>If you encounter errors like <code>compile: version \"go1.23.4\" does not match go tool version \"go1.24.1\"</code>, you need to update your go.mod file to match the Go version provided by Devbox:</p> <pre><code># Check your Go version\ndevbox run -- go version\n\n# Update your go.mod file accordingly\necho 'module example.com/seedling\n\ngo 1.24\n' &gt; app/go.mod\n\n# Also update your go.work file if you have one\necho 'go 1.24\n\nuse ./app\n' &gt; go.work\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#devbox-shell-not-working","title":"Devbox Shell Not Working","text":"<p>If you have trouble with the <code>devbox shell</code> command, you can use <code>devbox run</code> to execute commands within the Devbox environment:</p> <pre><code># Instead of entering a shell and running commands\ndevbox run -- &lt;command&gt;\n\n# For example\ndevbox run -- go build -o seedling\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#package-installation-issues","title":"Package Installation Issues","text":"<p>If you encounter issues installing packages, you can try:</p> <pre><code># Update Devbox\ndevbox version update\n\n# Clear Devbox cache\ndevbox nix gc\n</code></pre>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"cultivating-your-local-garden-create-seedlings-with-dev-containers-and-devbox/#docker-container-issues","title":"Docker Container Issues","text":"<p>If you have issues with the Dev Container:</p> <pre><code># Rebuild the container\ndevbox generate devcontainer --force\n\n# Check Docker is running\ndocker info\n</code></pre> <p>Have questions or need help with your development environment? Reach out on bluesky!</p>","tags":["devcontainers","devbox","nix-packages","local-development","kubernetes"]},{"location":"archive/2025/","title":"2025","text":""},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/devops/","title":"DevOps","text":""},{"location":"category/platform-engineering/","title":"Platform Engineering","text":""},{"location":"category/local-development/","title":"Local Development","text":""},{"location":"category/ai/","title":"AI","text":""},{"location":"category/artificial-intelligence/","title":"Artificial Intelligence","text":""},{"location":"category/doc-failures/","title":"Doc Failures","text":""}]}